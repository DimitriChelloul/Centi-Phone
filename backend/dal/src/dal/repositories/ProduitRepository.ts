import { query, pool } from '../config/db'; // Connexion √† la base de donn√©es
import { IProductRepository } from '../../dal/Interfaces/IProduitRepository';
import { ProduitsAVendre } from '../../../../domain/src/entities/Produits_a_vendre';
import { ProduitsReconditionnes } from '../../../../domain/src/entities/appareils_reconditionnes';
import { Marques } from '../../../../domain/src/entities/Marques';
import { Modele } from '../../../../domain/src/entities/Modeles';
import { inject, injectable } from "tsyringe";
import { Pool, PoolClient } from "pg";
import fs from "fs/promises"; // Pour la gestion des fichiers

// La classe ProductRepository est d√©clar√©e et export√©e pour √™tre utilis√©e ailleurs dans l'application.
//  Elle impl√©mente l'interface IProductRepository.
//  Le d√©corateur @injectable() est utilis√© pour indiquer que cette classe peut √™tre inject√©e comme d√©pendance.
@injectable()
export class ProductRepository implements IProductRepository {

  // La propri√©t√© client est d√©clar√©e comme priv√©e et de type PoolClient. Elle est utilis√©e pour g√©rer les connexions √† la base de donn√©es.
  private client!: PoolClient;

  // Le constructeur prend un param√®tre pool de type Pool. Le d√©corateur @inject("DatabasePool") est utilis√© pour injecter une instance de Pool dans la propri√©t√© pool.
  constructor(@inject("DatabasePool") private pool: Pool) {}

  // Cette m√©thode est asynchrone et prend un param√®tre optionnel client de type PoolClient. Elle retourne une promesse de type void.
  async initialize(client?: PoolClient): Promise<void> {
    // Si un PoolClient est fourni, il est assign√© √† la propri√©t√© client.
    if (client) {
      this.client = client; // Si un PoolClient est fourni (via UnitOfWork), on l'utilise
    } else {
      // Si aucun PoolClient n'est fourni, un nouveau client est obtenu du pool global en utilisant la m√©thode connect du pool
      try {
        this.client = await this.pool.connect();
      } catch (err) {
        // Les erreurs √©ventuelles sont captur√©es et une nouvelle erreur est lev√©e avec un message descriptif.
        if (err instanceof Error) {
          throw new Error(`Error connecting to the database: ${err.message}`);
        } else {
          throw new Error("An unknown error occurred while connecting to the database.");
        }
      }
    }
  }

  // Cette m√©thode est asynchrone et prend un param√®tre id (l'ID du produit). Elle retourne une promesse de type ProduitsAVendre ou null.
  async getProductById(id: number): Promise<ProduitsAVendre | null> {
    try {

      //La m√©thode query du client est utilis√©e pour ex√©cuter une requ√™te SQL de s√©lection dans la table produits_a_vendre pour r√©cup√©rer le produit par son ID.
      const result = await pool.query(
        `SELECT * FROM produits_a_vendre WHERE id = $1`,
        [id]
      );

      // Si aucun produit n'est trouv√©, null est retourn√©.
      if (result.rows.length === 0) {
        return null; // Produit non trouv√©
      }

      // Si un produit est trouv√©, une nouvelle instance de ProduitsAVendre est cr√©√©e avec les donn√©es retourn√©es par la requ√™te et est retourn√©e.
      return new ProduitsAVendre(result.rows[0]);
    } catch (error) {
      // Si une erreur survient, elle est logu√©e dans la console et une nouvelle erreur est lev√©e avec un message descriptif.
      console.error('Erreur lors de la r√©cup√©ration du produit par ID :', error);
      throw new Error('Erreur lors de la r√©cup√©ration du produit.');
    }
  }

  // Gestion des produits √† vendre
  //Cette m√©thode est asynchrone et retourne une promesse de type tableau de ProduitsAVendre
  async getAllProductsToSell(): Promise<ProduitsAVendre[]> {
    console.log('üîπ [DEBUG] Entr√©e dans getAllProductsToSell()...');
    try {
      console.log('üîπ [DEBUG] Ex√©cution de la requ√™te SQL...');
      // La m√©thode query du client est utilis√©e pour ex√©cuter une requ√™te SQL de s√©lection dans la table produits_a_vendre pour r√©cup√©rer tous les produits √† vendre.
      const result = await pool.query('SELECT * FROM produits_a_vendre');
      console.log('‚úÖ [DEBUG] R√©sultat SQL obtenu:', result, 'lignes.');
      // Les r√©sultats de la requ√™te sont mapp√©s en instances de ProduitsAVendre et retourn√©s.
      return result.rows.map((row) => new ProduitsAVendre(row));
    } catch (error) {
      //Si une erreur survient, elle est logu√©e dans la console et une nouvelle erreur est lev√©e avec un message descriptif
      console.error('Error fetching products to sell:', error);
      throw new Error('Failed to fetch products to sell');
    }
  }

  //Cette m√©thode est asynchrone et prend un param√®tre id (l'ID du produit). Elle retourne une promesse de type ProduitsAVendre ou null.
  async getProductToSellById(id: number): Promise<ProduitsAVendre | null> {
    try {
      // La m√©thode query du client est utilis√©e pour ex√©cuter une requ√™te SQL de s√©lection dans la table produits_a_vendre pour r√©cup√©rer le produit par son ID.
      const result = await pool.query('SELECT * FROM produits_a_vendre WHERE id = $1', [id]);
      //Si un produit est trouv√©, une nouvelle instance de ProduitsAVendre est cr√©√©e avec les donn√©es retourn√©es par la requ√™te et est retourn√©e. 
      if (result.rows.length > 0){
        return new ProduitsAVendre(result.rows[0]);
      }
      
      //Sinon, null est retourn√©.
        return null;

    } catch (error) {
      // Si une erreur survient, elle est logu√©e dans la console et une nouvelle erreur est lev√©e avec un message descriptif.
      console.error(`Error fetching product to sell with id ${id}:`, error);
      throw new Error('Failed to fetch product to sell');
    }
  }

  //Cette m√©thode est asynchrone et prend un param√®tre produit de type ProduitsAVendre. Elle retourne une promesse de type ProduitsAVendre.
  async createProduit(produit: ProduitsAVendre): Promise<ProduitsAVendre> {
    try {
      // La m√©thode query du client est utilis√©e pour ex√©cuter une requ√™te SQL d'insertion dans la table produits_a_vendre.
      //  Les valeurs des champs du produit sont pass√©es en param√®tres.
      const result = await pool.query(
        `INSERT INTO produits_a_vendre (nom, description, photo_produit, prix, stock, date_ajout)
         VALUES ($1, $2, $3, $4, $5, NOW()) RETURNING *`,
        [produit.nom, produit.description, produit.photoProduit, produit.prix, produit.stock]
      );
      // Une nouvelle instance de ProduitsAVendre est cr√©√©e avec les donn√©es retourn√©es par la requ√™te et est retourn√©e.
      return new ProduitsAVendre(result.rows[0]);
    } catch (error) {
      // Si une erreur survient, elle est logu√©e dans la console et une nouvelle erreur est lev√©e avec un message descriptif.
      console.error('Error creating product to sell:', error);
      throw new Error('Failed to create product to sell');
    }
  }

  //Cette m√©thode est asynchrone et prend deux param√®tres :
  //  produitId (l'ID du produit) et updatedData (les donn√©es mises √† jour de type Partial<ProduitsAVendre>). Elle retourne une promesse de type ProduitsAVendre
  async updateProduit(produitId: number, updatedData: Partial<ProduitsAVendre>): Promise<ProduitsAVendre> {
    try {

      // La m√©thode getRefurbishedDeviceById est appel√©e pour r√©cup√©rer l'appareil actuel par son ID.
      const existingProduct = await this.getProductById(produitId);
  
      // Si l'appareil n'est pas trouv√©, une erreur est lev√©e.
      if (!existingProduct) {
        throw new Error("Appareil reconditionn√© introuvable.");
      }
  
      // Si une nouvelle image est fournie et qu'une ancienne image existe,
      //  l'ancienne image est supprim√©e en utilisant la m√©thode unlink du module fs.
      if (updatedData.photoProduit && existingProduct.photoProduit) {
        try {
          await fs.unlink(existingProduct.photoProduit); // Supprimer l'ancien fichier image
        } catch (error) {
          //Les erreurs √©ventuelles sont logu√©es dans la console.
          console.error("Erreur lors de la suppression de l'ancien fichier :", error);
        }
      }

      // Les colonnes √† mettre √† jour sont g√©n√©r√©es dynamiquement en fonction des cl√©s de updatedData.
      const columns = Object.keys(updatedData).map((key, index) => `${key} = $${index + 2}`).join(', ');
      const values = Object.values(updatedData);

      //  La m√©thode query du client est utilis√©e
      //  pour ex√©cuter une requ√™te SQL de mise √† jour dans la table produits_a_vendre.
      //  Les valeurs des champs √† mettre √† jour sont pass√©es en param√®tres.
      const result = await pool.query(
        `UPDATE produits_a_vendre SET ${columns} WHERE id = $1 RETURNING *`,
        [produitId, ...values]
      );

      // Si aucun produit n'est trouv√©, une erreur est lev√©e.
      if (result.rows.length === 0) {
        throw new Error("Produit introuvable.");
      }

      // Une nouvelle instance de ProduitsAVendre est cr√©√©e avec les donn√©es retourn√©es par la requ√™te et est retourn√©e.
      return new ProduitsAVendre(result.rows[0]);
    } catch (error) {
      //Si une erreur survient, elle est logu√©e dans la console et une nouvelle erreur est lev√©e avec un message descriptif.
      console.error("Erreur lors de la mise √† jour du produit :", error);
      throw new Error("√âchec de la mise √† jour du produit.");
    }
  }

  //Cette m√©thode est asynchrone et prend deux param√®tres : deviceId (l'ID de l'appareil)
  //  et updatedData (les donn√©es mises √† jour de type Partial<ProduitsReconditionnes>).
  //  Elle retourne une promesse de type ProduitsReconditionnes.
  async updateRefurbishedDevices(deviceId: number, updatedData: Partial<ProduitsReconditionnes>): Promise<ProduitsReconditionnes> {
    try {
      // La m√©thode getRefurbishedDeviceById est appel√©e pour r√©cup√©rer l'appareil actuel par son ID.
      const existingDevice = await this.getRefurbishedDeviceById(deviceId);
  
      // Si l'appareil n'est pas trouv√©, une erreur est lev√©e.
      if (!existingDevice) {
        throw new Error("Appareil reconditionn√© introuvable.");
      }
  
      // Si une nouvelle image est fournie et qu'une ancienne image existe,
      //  l'ancienne image est supprim√©e en utilisant la m√©thode unlink du module fs.
      if (updatedData.photoProduit && existingDevice.photoProduit) {
        try {
          await fs.unlink(existingDevice.photoProduit); // Supprimer l'ancien fichier image
        } catch (error) {
          //Les erreurs √©ventuelles sont logu√©es dans la console.
          console.error("Erreur lors de la suppression de l'ancien fichier :", error);
        }
      }
  
      // Les colonnes √† mettre √† jour sont g√©n√©r√©es dynamiquement en fonction des cl√©s de updatedData.
      const columns = Object.keys(updatedData).map((key, index) => `${key} = $${index + 2}`).join(", ");
      const values = Object.values(updatedData);
  
      //  La m√©thode query du client est utilis√©e pour ex√©cuter une requ√™te SQL 
      // de mise √† jour dans la table appareils_reconditionnes. Les valeurs des champs √† mettre √† jour sont pass√©es en param√®tres.
      const result = await pool.query(
        `UPDATE appareils_reconditionnes SET ${columns} WHERE id = $1 RETURNING *`,
        [deviceId, ...values]
      );
  
      //Si aucun appareil n'est trouv√©, une erreur est lev√©e.
      if (result.rows.length === 0) {
        throw new Error("Appareil reconditionn√© introuvable.");
      }
  
      // Une nouvelle instance de ProduitsReconditionnes est cr√©√©e avec les donn√©es retourn√©es par la requ√™te et est retourn√©e.
      return new ProduitsReconditionnes(result.rows[0]);
    } catch (error) {
      //Si une erreur survient, elle est logu√©e dans la console et une nouvelle erreur est lev√©e avec un message descriptif.
      console.error("Erreur lors de la mise √† jour de l'appareil reconditionn√© :", error);
      throw new Error("√âchec de la mise √† jour de l'appareil reconditionn√©.");
    }
  }


  // Cette m√©thode est asynchrone et prend un param√®tre id (l'ID du produit). Elle retourne une promesse de type void.
  async deleteProduct(id: number): Promise<void> {
    try {
      // La m√©thode query du client est utilis√©e pour ex√©cuter une requ√™te SQL de suppression dans la table produits_a_vendre pour supprimer le produit par son ID.
      await pool.query('DELETE FROM produits_a_vendre WHERE id = $1', [id]);
    } catch (error) {
      //Si une erreur survient, elle est logu√©e dans la console et une nouvelle erreur est lev√©e avec un message descriptif
      console.error(`Error deleting product to sell with id ${id}:`, error);
      throw new Error('Failed to delete product to sell');
    }
  }

  // Gestion des appareils reconditionn√©s
  //Cette m√©thode est asynchrone et retourne une promesse de type tableau de ProduitsReconditionnes
  async getAllRefurbishedDevices(): Promise<ProduitsReconditionnes[]> {
    try {
      //La m√©thode query du client est utilis√©e pour ex√©cuter une requ√™te SQL de s√©lection dans la table appareils_reconditionnes
      //  avec des jointures sur les tables marques et modeles pour r√©cup√©rer tous les appareils reconditionn√©s avec leurs marques et mod√®les associ√©s.
      const result = await pool.query(
        `SELECT ar.*, m.nom_marque, md.nom_modele
         FROM appareils_reconditionnes ar
         JOIN marques m ON ar.idmarque = m.id
         JOIN modeles md ON ar.idmodele = md.id`
      );
      // Les r√©sultats de la requ√™te sont mapp√©s en instances de ProduitsReconditionnes et retourn√©s.
      return result.rows.map(
        (row) =>
          new ProduitsReconditionnes({
            ...row,
            nomMarque: row.nom_marque,
            nomModele: row.nom_modele,
          })
      );
    } catch (error) {
      // Si une erreur survient, elle est logu√©e dans la console et une nouvelle erreur est lev√©e avec un message descriptif.
      console.error('Error fetching refurbished devices:', error);
      throw new Error('Failed to fetch refurbished devices');
    }
  }

  // Cette m√©thode est asynchrone et prend un param√®tre id (l'ID de l'appareil). Elle retourne une promesse de type ProduitsReconditionnes ou null.
  async getRefurbishedDeviceById(id: number): Promise<ProduitsReconditionnes | null> {
    try {
      // La m√©thode query du client est utilis√©e pour ex√©cuter une requ√™te SQL de s√©lection dans la table appareils_reconditionnes
      //  avec des jointures sur les tables marques et modeles pour r√©cup√©rer l'appareil reconditionn√© par son ID avec sa marque et son mod√®le associ√©s.
      const result = await pool.query(
        `SELECT ar.*, m.nom_marque, md.nom_modele
         FROM appareils_reconditionnes ar
         JOIN marques m ON ar.idmarque = m.id
         JOIN modeles md ON ar.idmodele = md.id
         WHERE ar.id = $1`,
        [id]
      );
  
      // Si un appareil est trouv√©,
      //  une nouvelle instance de ProduitsReconditionnes est cr√©√©e avec les donn√©es retourn√©es par la requ√™te et est retourn√©e. 
      if (result.rows.length > 0) {
        return new ProduitsReconditionnes({
          ...result.rows[0],
          nomMarque: result.rows[0].nom_marque,
          nomModele: result.rows[0].nom_modele,
        });
      }
  
      // Sinon, null est retourn√©
      return null;
    } catch (error) {
      // Si une erreur survient, elle est logu√©e dans la console et une nouvelle erreur est lev√©e avec un message descriptif.
      console.error(`Error fetching refurbished device with id ${id}:`, error);
      throw new Error('Failed to fetch refurbished device');
    }
  }
  

  //Cette m√©thode est asynchrone et prend un param√®tre device de type ProduitsReconditionnes. Elle retourne une promesse de type ProduitsReconditionnes.
  async createRefurbishedDevice(device: ProduitsReconditionnes): Promise<ProduitsReconditionnes> {
    try {
      // La m√©thode query du client est utilis√©e pour ex√©cuter une requ√™te SQL d'insertion dans la table appareils_reconditionnes.
      //  Les valeurs des champs de l'appareil sont pass√©es en param√®tres
      const result = await pool.query(
        `INSERT INTO appareils_reconditionnes (idmarque, idmodele, description, photo_produit, prix, stock, garantie_mois, date_reconditionnement, date_ajout)
         VALUES ($1, $2, $3, $4, $5, $6, $7, $8, NOW()) RETURNING *`,
        [
          device.idMarque,
          device.idModele,
          device.description,
          device.photoProduit,
          device.prix,
          device.stock,
          device.garantieMois,
          device.dateReconditionnement,
        ]
      );
      // Une nouvelle instance de ProduitsReconditionnes est cr√©√©e avec les donn√©es retourn√©es par la requ√™te et est retourn√©e.
      return new ProduitsReconditionnes(result.rows[0]);
    } catch (error) {
      // Si une erreur survient, elle est logu√©e dans la console et une nouvelle erreur est lev√©e avec un message descriptif.
      console.error('Error creating refurbished device:', error);
      throw new Error('Failed to create refurbished device');
    }
  }

  // Cette m√©thode est asynchrone et prend un param√®tre id (l'ID de l'appareil). Elle retourne une promesse de type void.
  async deleteRefurbishedDevice(id: number): Promise<void> {
    try {
      //La m√©thode query du client est utilis√©e pour ex√©cuter une requ√™te SQL de suppression dans la table appareils_reconditionnes pour supprimer l'appareil par son ID.
      await pool.query('DELETE FROM appareils_reconditionnes WHERE id = $1', [id]);
    } catch (error) {
      //Si une erreur survient, elle est logu√©e dans la console et une nouvelle erreur est lev√©e avec un message descriptif.
      console.error(`Error deleting refurbished device with id ${id}:`, error);
      throw new Error('Failed to delete refurbished device');
    }
  }

  // Gestion des marques et mod√®les
  //Cette m√©thode est asynchrone et retourne une promesse de type tableau de Marques.
  async getAllBrands(): Promise<Marques[]> {
    try {
      // La m√©thode query du client est utilis√©e pour ex√©cuter une requ√™te SQL de s√©lection dans la table marques pour r√©cup√©rer toutes les marques.
      const result = await pool.query('SELECT * FROM marques');
      // Les r√©sultats de la requ√™te sont mapp√©s en instances de Marques et retourn√©s.
      return result.rows.map((row) => new Marques(row));
    } catch (error) {
      // Si une erreur survient, elle est logu√©e dans la console et une nouvelle erreur est lev√©e avec un message descriptif.
      console.error('Error fetching brands:', error);
      throw new Error('Failed to fetch brands');
    }
  }

  // Cette m√©thode est asynchrone et prend un param√®tre id (l'ID de la marque). Elle retourne une promesse de type Marques ou null.
  async getBrandById(id: number): Promise<Marques | null> {
    try {
      // La m√©thode query du client est utilis√©e pour ex√©cuter une requ√™te SQL de s√©lection dans la table marques pour r√©cup√©rer la marque par son ID.
      const result = await pool.query('SELECT * FROM marques WHERE id = $1', [id]);
      //Si une marque est trouv√©e, une nouvelle instance de Marques est cr√©√©e avec les donn√©es retourn√©es par la requ√™te et est retourn√©e
      if (result.rows.length > 0){
        return new Marques(result.rows[0]);
      }

      // Sinon, null est retourn√©.
      return null;
      
    } catch (error) {
      //Si une erreur survient, elle est logu√©e dans la console et une nouvelle erreur est lev√©e avec un message descriptif.
      console.error(`Error fetching brand with id ${id}:`, error);
      throw new Error('Failed to fetch brand');
    }
  }

  // Cette m√©thode est asynchrone et prend un param√®tre brandId (l'ID de la marque). Elle retourne une promesse de type tableau de Modele.
  async getAllModelsByBrand(brandId: number): Promise<Modele[]> {
    try {
      // La m√©thode query du client est utilis√©e pour ex√©cuter une requ√™te SQL de s√©lection 
      // dans la table modeles pour r√©cup√©rer tous les mod√®les associ√©s √† la marque par son ID.
      const result = await pool.query('SELECT * FROM modeles WHERE id_marque = $1', [brandId]);
      // Les r√©sultats de la requ√™te sont mapp√©s en instances de Modele et retourn√©s.
      return result.rows.map((row) => new Modele(row));
    } catch (error) {
      //Si une erreur survient, elle est logu√©e dans la console et une nouvelle erreur est lev√©e avec un message descriptif.
      console.error(`Error fetching models for brand with id ${brandId}:`, error);
      throw new Error('Failed to fetch models');
    }
  }

  // Cette m√©thode est asynchrone et prend deux param√®tres :
  //  productId (l'ID du produit) et quantityChange (la quantit√© √† ajouter ou d√©duire, peut √™tre n√©gatif).
  //  Elle retourne une promesse de type void.
    async updateStock(productId: number, quantityChange: number): Promise<void> {

      const query = `
        UPDATE produits_a_vendre
        SET stock = stock + $1
        WHERE id = $2
      `;
      // La m√©thode query du client est utilis√©e pour ex√©cuter une requ√™te SQL 
      // de mise √† jour dans la table produits_a_vendre pour mettre √† jour le stock du produit par son ID.
      await pool.query(query, [quantityChange, productId]);
    }
}