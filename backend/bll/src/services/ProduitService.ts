import { injectable, inject } from "tsyringe";
import { IProductRepository } from "../../../dal/src/dal/Interfaces/IProduitRepository";
import { IProductService } from "../Interfaces/IProduitService";
import { ProduitsAVendre } from '../../../domain/src/entities/Produits_a_vendre';
import { ProduitsReconditionnes } from '../../../domain/src/entities/appareils_reconditionnes';
import { Marques } from '../../../domain/src/entities/Marques';
import { Modele } from '../../../domain/src/entities/Modeles';
import { IUnitOfWork } from "../../../dal/src/dal/Interfaces/IUnitOfWork";
import fs from "fs/promises";


// La classe ProductService est d√©clar√©e et export√©e pour √™tre utilis√©e ailleurs dans l'application. 
// Elle impl√©mente l'interface IProductService. Le d√©corateur @injectable() est utilis√© pour indiquer que cette classe peut √™tre inject√©e comme d√©pendance.
@injectable()
export class ProductService implements IProductService {

  // Le constructeur prend deux param√®tres :

 // productRepo de type IProductRepository : Inject√© avec le d√©corateur @inject("IProductRepository").
 // unitOfWork de type IUnitOfWork : Inject√© avec le d√©corateur @inject("IUnitOfWork").
  constructor(@inject("IProductRepository") private productRepo: IProductRepository,
  @inject("IUnitOfWork") private unitOfWork: IUnitOfWork) {}

  // Cette m√©thode est asynchrone et retourne une promesse de type tableau de ProduitsAVendre
  async getAllProductsToSell(): Promise<ProduitsAVendre[]> {
    //appelle la m√©thode getAllProductsToSell du repository de produits pour r√©cup√©rer tous les produits √† vendre.
    console.log('üîπ [DEBUG] Service `getAllProductsToSell` appel√©');
    return this.productRepo.getAllProductsToSell();
  }

  //Cette m√©thode est asynchrone et prend un param√®tre productId (l'ID du produit). Elle retourne une promesse de type ProduitsAVendre ou null
  async getProductToSellById(productId: number): Promise<ProduitsAVendre | null> {
    //appelle la m√©thode getProductToSellById du repository de produits pour r√©cup√©rer un produit √† vendre par son ID.
    return this.productRepo.getProductToSellById(productId);
  }

  // Cette m√©thode est asynchrone et prend un param√®tre produit de type ProduitsAVendre. Elle retourne une promesse de type ProduitsAVendre.
  async addProduit(produit: ProduitsAVendre): Promise<ProduitsAVendre> {
    //appelle la m√©thode createProduit du repository de produits pour ajouter un nouveau produit √† vendre
    return this.productRepo.createProduit(produit);
  }

  // Cette m√©thode est asynchrone et prend deux param√®tres :
  //  produitId (l'ID du produit) et updatedData (les donn√©es mises √† jour).
  //  Elle retourne une promesse de type ProduitsAVendre.
  async updateProduit(produitId: number, updatedData: Partial<ProduitsAVendre>): Promise<ProduitsAVendre> {
    //  La m√©thode getProductById du repository de produits est appel√©e pour r√©cup√©rer le produit actuel par son ID
    const existingProduct = await this.productRepo.getProductById(produitId);
  
    //Si le produit n'est pas trouv√©, une erreur est lev√©e.
    if (!existingProduct) {
      throw new Error("Produit introuvable.");
    }
  
    //  Si une nouvelle image est fournie et qu'une ancienne image existe,
    //  l'ancienne image est supprim√©e en utilisant la m√©thode unlink du module fs. Les erreurs √©ventuelles sont logu√©es dans la console.
    if (updatedData.photoProduit && existingProduct.photoProduit) {
      try {
        await fs.unlink(existingProduct.photoProduit); // Supprimer l'ancien fichier
      } catch (error) {
        console.error("Erreur lors de la suppression de l'ancien fichier :", error);
      }
    }
  
    //  La m√©thode updateProduit du repository de produits est appel√©e pour mettre √† jour le produit avec les nouvelles donn√©es.
    return this.productRepo.updateProduit(produitId, updatedData);
  }

  // Cette m√©thode est asynchrone et prend un param√®tre productId (l'ID du produit). Elle retourne une promesse de type void
  async deleteProduit(productId: number): Promise<void> {
    //appelle la m√©thode deleteProduct du repository de produits pour supprimer un produit par son ID.
    await this.productRepo.deleteProduct(productId);
  }

  // Cette m√©thode est asynchrone et retourne une promesse de type tableau de ProduitsReconditionnes
  async getAllRefurbishedDevices(): Promise<ProduitsReconditionnes[]> {
    //appelle la m√©thode getAllRefurbishedDevices du repository de produits pour r√©cup√©rer tous les appareils reconditionn√©s.
    return this.productRepo.getAllRefurbishedDevices();
  }

  //Cette m√©thode est asynchrone et prend un param√®tre deviceId (l'ID de l'appareil). Elle retourne une promesse de type ProduitsReconditionnes ou null
  async getRefurbishedDeviceById(deviceId: number): Promise<ProduitsReconditionnes | null> {
    //appelle la m√©thode getRefurbishedDeviceById du repository de produits pour r√©cup√©rer un appareil reconditionn√© par son ID.
    return this.productRepo.getRefurbishedDeviceById(deviceId);
  }

  // Cette m√©thode est asynchrone et prend un param√®tre device de type ProduitsReconditionnes. Elle retourne une promesse de type ProduitsReconditionnes.
  async addRefurbishedDevice(device: ProduitsReconditionnes): Promise<ProduitsReconditionnes> {
    // appelle la m√©thode createRefurbishedDevice du repository de produits pour ajouter un nouvel appareil reconditionn√©.
    return this.productRepo.createRefurbishedDevice(device);
  }

  // Cette m√©thode est asynchrone et prend deux param√®tres :
  //  deviceId (l'ID de l'appareil) et updatedData (les donn√©es mises √† jour). Elle retourne une promesse de type ProduitsReconditionnes.
  async updateRefurbishedDevice(deviceId: number, updatedData: Partial<ProduitsReconditionnes>): Promise<ProduitsReconditionnes> {
    // R√©cup√©rer le produit actuel
    const existingProduct = await this.productRepo.getRefurbishedDeviceById(deviceId);
  
    if (!existingProduct) {
      throw new Error("Produit introuvable.");
    }
  
    // Si une nouvelle image est fournie, supprimer l'ancienne
    if (updatedData.photoProduit && existingProduct.photoProduit) {
      try {
        await fs.unlink(existingProduct.photoProduit); // Supprimer l'ancien fichier
      } catch (error) {
        console.error("Erreur lors de la suppression de l'ancien fichier :", error);
      }
    }
  
    // Mettre √† jour le produit
    return this.productRepo.updateRefurbishedDevices(deviceId, updatedData);
  }

  // Cette m√©thode est asynchrone et prend un param√®tre deviceId (l'ID de l'appareil). Elle retourne une promesse de type void. 
  async deleteRefurbishedDevice(deviceId: number): Promise<void> {
    // appelle la m√©thode deleteRefurbishedDevice du repository de produits pour supprimer un appareil reconditionn√© par son ID.
    await this.productRepo.deleteRefurbishedDevice(deviceId);
  }

  //Cette m√©thode est asynchrone et retourne une promesse de type tableau de Marques
  async getAllBrands(): Promise<Marques[]> {
    //appelle la m√©thode getAllBrands du repository de produits pour r√©cup√©rer toutes les marques.
    return this.productRepo.getAllBrands();
  }

  // Cette m√©thode est asynchrone et prend un param√®tre brandId (l'ID de la marque). Elle retourne une promesse de type Marques ou null.
  async getBrandById(brandId: number): Promise<Marques | null> {
    // appelle la m√©thode getBrandById du repository de produits pour r√©cup√©rer une marque par son ID
    return this.productRepo.getBrandById(brandId);
  }

  // Cette m√©thode est asynchrone et prend un param√®tre brandId (l'ID de la marque). Elle retourne une promesse de type tableau de Modele
  async getAllModelsByBrand(brandId: number): Promise<Modele[]> {
    // appelle la m√©thode getAllModelsByBrand du repository de produits pour r√©cup√©rer tous les mod√®les d'une marque par son ID.
    return this.productRepo.getAllModelsByBrand(brandId);
  }

  /**
   * Met √† jour le stock d'un produit.
   * @param productId - ID du produit.
   * @param quantityChange - Quantit√© √† ajouter ou retirer du stock.
   */
  async updateStock(productId: number, quantityChange: number): Promise<void> {
    await this.unitOfWork.start();

    try {
      // Appeler la m√©thode du ProductRepository via UnitOfWork
      await this.unitOfWork.productRepository.updateStock(productId, quantityChange);
      await this.unitOfWork.commit();
    } catch (error) {
      await this.unitOfWork.rollback();
      throw new Error(`Erreur lors de la mise √† jour du stock : ${(error as Error).message}`);
    }
  }

  // Cette m√©thode est asynchrone et prend deux param√®tres : produitId (l'ID du produit) et filePath (le chemin du fichier image). Elle retourne une promesse de type void.
  async updateProductImage(produitId: number, filePath: string): Promise<void> {
    //La m√©thode getProductToSellById du repository de produits est appel√©e pour r√©cup√©rer le produit par son ID
    const product = await this.productRepo.getProductToSellById(produitId);

    //Si le produit n'est pas trouv√©, une erreur est lev√©e.
    if (!product) {
      throw new Error("Produit non trouv√©.");
    }

    //  Le champ photoProduit est mis √† jour avec le nouveau chemin du fichier image
  const updatedData = { photoProduit: filePath };
  // La m√©thode updateProduit du repository de produits est appel√©e pour mettre √† jour le produit avec les nouvelles donn√©es.
  await this.productRepo.updateProduit(produitId, updatedData);
  }

  //Cette m√©thode est asynchrone et prend deux param√®tres :
  //  deviceId (l'ID de l'appareil) et filePath (le chemin du fichier image). Elle retourne une promesse de type void.
  async updateReconditionneImage(deviceid: number, filePath: string): Promise<void> {
    //m√©thode getRefurbishedDeviceById du repository de produits est appel√©e pour r√©cup√©rer l'appareil par son ID.
    const reconditionne = await this.productRepo.getRefurbishedDeviceById(deviceid);
    //Si l'appareil n'est pas trouv√©, une erreur est lev√©e.
    if (!reconditionne) {
      throw new Error("Produit non trouv√©.");
    }

    // Le champ photoProduit est mis √† jour avec le nouveau chemin du fichier image.
  const updatedData = { photoProduit: filePath };
  //m√©thode updateRefurbishedDevices du repository de produits est appel√©e pour mettre √† jour l'appareil avec les nouvelles donn√©es.
  await this.productRepo.updateRefurbishedDevices(deviceid, updatedData);
  }
}

