import { Request, Response, NextFunction } from "express";
import { container } from "tsyringe";
import { RepairService } from "../../../bll/src/services/ReparationService";
import { Devis } from "../../../domain/src/entities/devis";

export class ReparationController {

  // utilis√©e pour acc√©der aux m√©thodes du service de r√©paration
  private repairService: RepairService;
//Constructeur de la classe ReparationController 
  constructor() {
    try {
      // Essaie de r√©soudre une instance de RepairService en utilisant le conteneur de d√©pendances tsyringe
      this.repairService = container.resolve(RepairService);
      // Si la r√©solution r√©ussit, un message de succ√®s est logg√©
      console.log("RepairService r√©solu avec succ√®s.");
    } catch (error) {
      throw error; // Lancer une erreur pour √©viter une instanciation incorrecte.
    }
  }

  // Cr√©er un RDV
  // Cette m√©thode est asynchrone et prend trois param√®tres : req (la requ√™te), res (la r√©ponse), et next (la fonction de gestion des erreurs)
  createRdv = async (req: Request, res: Response, next: NextFunction): Promise<void> => {
    try {
      console.log("üîπ [DEBUG] Donn√©es re√ßues dans createRdv :", req.body);

        // V√©rifiez si l'utilisateur est authentifi√©
        if (!req.user || !req.user.userId) {
            res.status(401).json({ message: "Utilisateur non authentifi√©." });
            return;
        }

        console.log('Utilisateur authentifi√© dans createRdv:', req.user);
        console.log('Donn√©es re√ßues dans createRdv:', req.body);

        // V√©rifiez les donn√©es avant traitement
        if (!req.body.dateRdv) {
            console.error("‚ùå [ERROR] Date du rendez-vous manquante.");
            res.status(400).json({ message: "Date du rendez-vous manquante." });
            return;
        }

        const id = req.user?.userId || req.body.utilisateurId;
        const { description, dateRdv } = req.body;


        if (!id) {
          console.error("‚ùå [ERROR] ID utilisateur manquant !");
           res.status(401).json({ message: "Utilisateur non authentifi√©." });
      }
        console.log("üîπ [DEBUG] Donn√©es re√ßues dans createRdv:", req.body);

        // V√©rification et conversion de la date
        let parsedDate;

        console.log("üîπ [DEBUG] Valeur brute de dateRdv re√ßue:", dateRdv);
        if (typeof dateRdv === "string") {
            parsedDate = new Date(dateRdv);
        } else {
            parsedDate = dateRdv;
        }

        if (isNaN(parsedDate?.getTime())) {
          console.error("‚ùå [ERROR] Format de date invalide :", dateRdv);
          res.status(400).json({ message: "Format de date invalide." });
          return;
      }

        console.log("üîπ [DEBUG] Date apr√®s conversion :", parsedDate);

        // Appeler le service pour cr√©er un rendez-vous
        await this.repairService.createRdv(id, description, parsedDate);

        res.status(201).json({ message: "Rendez-vous cr√©√© avec succ√®s." });
    } catch (error) {
        next(error);
    }
};


  // Ajouter un suivi de r√©paration
  // Cette m√©thode est asynchrone et prend trois param√®tres : req, res, et next.
  addSuiviReparation = async (req: Request, res: Response, next: NextFunction) => {
    try {
      //Les propri√©t√©s rdvId et statut sont extraites du corps de la requ√™te.
      const { rdvId, statut } = req.body;
      // La m√©thode addSuiviReparation du service RepairService est appel√©e avec les donn√©es extraites.
      await this.repairService.addSuiviReparation(rdvId, statut);
      //Si l'appel au service r√©ussit, une r√©ponse JSON avec un message de succ√®s est renvoy√©e avec le statut 201
      res.status(201).json({ message: "Suivi de r√©paration ajout√©." });
    } catch (error) {
      //Si une erreur se produit, elle est pass√©e √† la fonction next pour √™tre g√©r√©e par le middleware d'erreur
      next(error);
    }
  };

  // Mettre √† jour le statut d'une r√©paration
  //Cette m√©thode est asynchrone et prend trois param√®tres : req, res, et next.
  updateStatutReparation = async (req: Request, res: Response, next: NextFunction) => {
    try {
      // Les propri√©t√©s rendezVousId, statut, clientEmail, et clientName sont extraites du corps de la requ√™te
      const { rendezVousId, statut, clientEmail, clientName } = req.body;
      // La m√©thode updateStatutReparation du service RepairService est appel√©e avec les donn√©es extraites
      await this.repairService.updateStatutReparation(rendezVousId, statut, clientEmail, clientName);
      //Si l'appel au service r√©ussit, une r√©ponse JSON avec un message de succ√®s est renvoy√©e avec le statut 200
      res.status(200).json({ message: "Statut de r√©paration mis √† jour avec succ√®s." });
    } catch (error) {
      // Si une erreur se produit, elle est pass√©e √† la fonction next pour √™tre g√©r√©e par le middleware d'erreur.
      next(error);
    }
  };

  // Cr√©er un devis
  //Cette m√©thode est asynchrone et prend trois param√®tres : req, res, et next.
  createDevis = async (req: Request, res: Response, next: NextFunction) => {
    try {
      // La propri√©t√© utilisateurId et le reste des donn√©es (devisData) sont extraites du corps de la requ√™te
      const { utilisateurId, ...devisData } = req.body;
      // La m√©thode createDevis du service RepairService est appel√©e avec les donn√©es extraites.
      const devis: Devis = await this.repairService.createDevis(utilisateurId, devisData);
      //Si l'appel au service r√©ussit, une r√©ponse JSON avec le devis cr√©√© est renvoy√©e avec le statut 201
      res.status(201).json(devis);
    } catch (error) {
      // Si une erreur se produit, elle est pass√©e √† la fonction next pour √™tre g√©r√©e par le middleware d'erreur
      next(error);
    }
  };
}
